*  today i have solved the problem of the day problems on leetcode and GFG 
leetcode : the equestion the find the shortest distance between source and destination each query
if have done using bfs and dfs - but dfs is recommened bcz whenever the contrtaints is large it may occurs stackoverflow

class Solution {
    public int[] shortestDistanceAfterQueries(int n, int[][] q) {
        int ans[]=new int[q.length];
        int mat[][]=new int[n][n];
        List<List<Integer>> list =new ArrayList<>();
        
        for(int i=0;i<n;i++)
        {
           list.add(new ArrayList<Integer>());
           if(i<n-1)
           list.get(i).add(i+1); 
        }
        int dp[]=new int[n];
        for(int i=0;i<q.length;i++)
        {
             int u=q[i][0];
             int v=q[i][1];
            list.get(u).add(v);
            Arrays.fill(dp,-1);
             ans[i]=compute(0,list,n,dp);
        }

        return ans;
    }
    public static int compute(int start, List<List<Integer>> list,int n) //bfs
    {
        Queue<Integer> q =new LinkedList<>();
        boolean vis[]=new boolean[n];
        vis[start]=true;
        q.add(start);
        int steps=0;
        while(q.size()!=0)
        {
            int sz=q.size();
            for(int i=0;i<sz;i++)
            {
                int cur=q.poll();
                if(cur==n-1)
                return steps;

                for(int ele:list.get(cur))
                {
                    if(vis[ele]==false)
                    {
                        q.add(ele);
                        vis[ele]=true;
                    }
                }
            }
            steps++;
        }
        return -1;
    }
    public static int compute(int idx, List<List<Integer>> list,int n,int dp[]) //dfs
    {
        if(idx==n-1)
        return 0;
        if(dp[idx]!=-1)
        return dp[idx];
          int min=Integer.MAX_VALUE;
          for(int i=0;i<list.get(idx).size();i++)
          {
                  min=Math.min(min,compute(list.get(idx).get(i),list,n,dp)+1);
              
          }
          return dp[idx]=min;
    }
}

GFG : the question is find smallest missing positive number
i have done using set and also can be done by using count after sorting the array

class Solution {
    // Function to find the smallest positive number missing from the array.
    public int missingNumber(int[] arr) {
        // Your code here
        Set<Integer> s =new HashSet<>();
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>0)
            s.add(arr[i]);
        }
        for(int i=1;i<=100000;i++)
        {
            if(!s.contains(i))
            return i;
        }
        return -1;
    }
}
