


* today i have solved the problem of the day for leetcode and GFG 
leetcode question is sliding puzzle 
Link - https://leetcode.com/problems/sliding-puzzle/description/
Code : 

class Solution {
    public int slidingPuzzle(int[][] bd) {
        String fstr= "123450";
        String start="";
        for(int i=0;i<2;i++)
        {
            for(int j=0;j<3;j++)
            {
                start+=bd[i][j];
            }
        }
        HashSet<String> vis =new HashSet<>();
        Queue<String> q =new LinkedList<>();
        q.offer(start);
        vis.add(start);
        int dir[][]={{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}};
        int res=0;

        while(q.size()!=0)
        {
            int n=q.size();
            for(int i=0;i<n;i++)
            {
                 String cur=q.poll();
                if(cur.equals(fstr))
                return res;

                int idx=cur.indexOf('0');

                int d[]=dir[idx];
                for(int m:d)
                {
                    String next=swap(cur,idx,m);
                    if(!vis.contains(next))
                     { q.offer(next);
                      vis.add(next);
                     }
                }

            }
            res++;
        }
        return -1;
        
    }
    public static String swap(String s,int i,int j)
    {
        char ch[]=s.toCharArray();
        char c=ch[i];
        ch[i]=ch[j];
        ch[j]=c;
        return new String(ch);
    }
}

* I have explored the KADANE's Algorithm for max subarray sum and product
max product subarray

class Solution {
    // Function to find maximum product subarray
    int maxProduct(int[] arr) {
        // code here
        int max=Integer.MIN_VALUE;
        int curmax=1;
        for(int i=0;i<arr.length;i++)
        {
            curmax*=arr[i];  
            max=Math.max(max,curmax);
            if(curmax==0)
            curmax=1;
        }
        curmax=1;
        for(int i=arr.length-1;i>=0;i--)
        {
            curmax*=arr[i];  
            max=Math.max(max,curmax);
            if(curmax==0)
            curmax=1;
        }
        return max;
        
        
    }
}
and also finding the length for the subarrays is possible and printing its indices

class Solution {
    // Function to find maximum product subarray
    int maxProduct(int[] arr) {
        // Initialize variables for forward traversal
        int max1 = arr[0], curMax = 1;
        int start1 = 0, tempStart1 = 0, end1 = 0;

        // Forward traversal to find max product and indices
        for (int i = 0; i < arr.length; i++) {
            curMax *= arr[i];
            if (curMax > max1) {
                max1 = curMax;
                start1 = tempStart1;
                end1 = i;
            }
            if (curMax == 0) {
                curMax = 1;
                tempStart1 = i + 1;
            }
        }

        // Initialize variables for backward traversal
        int max2 = arr[0];
        curMax = 1;
        int end2 = arr.length - 1, tempEnd2 = arr.length - 1, start2 = arr.length - 1;

        // Backward traversal to find max product and indices
        for (int i = arr.length - 1; i >= 0; i--) {
            curMax *= arr[i];
            if (curMax > max2) {
                max2 = curMax;
                end2 = tempEnd2;
                start2 = i;
            }
            if (curMax == 0) {
                curMax = 1;
                tempEnd2 = i - 1;
            }
        }

        // Compare forward and backward results
        int ans = max1;
        int start = start1, end = end1;

        if (max2 > max1) {
            ans = max2;
            start = start2;
            end = end2;
        }

        System.out.println("Start Index: " + start + " End Index: " + end);
        return ans;
    }

    // Driver Code
    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] arr = {2, 3, -2, 4, -1};
        System.out.println("Maximum Product: " + sol.maxProduct(arr));
    }
}
